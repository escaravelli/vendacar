-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create vehicles table
CREATE TABLE IF NOT EXISTS vehicles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    user_id UUID REFERENCES auth.users NOT NULL,
    placa TEXT NOT NULL,
    marca TEXT NOT NULL,
    modelo TEXT NOT NULL,
    submodelo TEXT,
    ano_fab INTEGER NOT NULL,
    ano_mod INTEGER NOT NULL,
    cor TEXT NOT NULL,
    combustivel TEXT NOT NULL,
    km INTEGER NOT NULL,
    cambio TEXT NOT NULL,
    tipo TEXT NOT NULL,
    portas TEXT NOT NULL,
    valor DECIMAL(12,2) NOT NULL,
    imagens TEXT[] NOT NULL,
    opcionais TEXT[],
    observacao TEXT,
    video_url TEXT,
    CONSTRAINT vehicles_placa_unique UNIQUE (placa)
);

-- Create contacts table
CREATE TABLE IF NOT EXISTS contacts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    phone TEXT NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    is_archived BOOLEAN DEFAULT FALSE
);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_vehicles_updated_at
    BEFORE UPDATE ON vehicles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_contacts_updated_at
    BEFORE UPDATE ON contacts
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- RLS Policies for vehicles table
ALTER TABLE vehicles ENABLE ROW LEVEL SECURITY;

-- Allow public read access to vehicles
CREATE POLICY "Allow public read access to vehicles"
    ON vehicles FOR SELECT
    TO public
    USING (true);

-- Allow authenticated users to insert their own vehicles
CREATE POLICY "Allow authenticated users to insert their own vehicles"
    ON vehicles FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

-- Allow users to update their own vehicles
CREATE POLICY "Allow users to update their own vehicles"
    ON vehicles FOR UPDATE
    TO authenticated
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own vehicles
CREATE POLICY "Allow users to delete their own vehicles"
    ON vehicles FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- RLS Policies for contacts table
ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;

-- Allow public to insert contacts (for the contact form)
CREATE POLICY "Allow public to insert contacts"
    ON contacts FOR INSERT
    TO public
    WITH CHECK (true);

-- Allow authenticated users to read contacts
CREATE POLICY "Allow authenticated users to read contacts"
    ON contacts FOR SELECT
    TO authenticated
    USING (true);

-- Allow authenticated users to update contacts
CREATE POLICY "Allow authenticated users to update contacts"
    ON contacts FOR UPDATE
    TO authenticated
    USING (true);

-- Allow authenticated users to delete contacts
CREATE POLICY "Allow authenticated users to delete contacts"
    ON contacts FOR DELETE
    TO authenticated
    USING (true);

-- Create storage bucket for vehicle images
INSERT INTO storage.buckets (id, name, public)
VALUES ('uploadatr', 'uploadatr', true)
ON CONFLICT (id) DO NOTHING;

-- Storage policies for vehicle images
CREATE POLICY "Allow public to read vehicle images"
    ON storage.objects FOR SELECT
    TO public
    USING (bucket_id = 'uploadatr');

CREATE POLICY "Allow authenticated users to upload vehicle images"
    ON storage.objects FOR INSERT
    TO authenticated
    WITH CHECK (bucket_id = 'uploadatr');

CREATE POLICY "Allow users to update their own vehicle images"
    ON storage.objects FOR UPDATE
    TO authenticated
    USING (bucket_id = 'uploadatr');

CREATE POLICY "Allow users to delete their own vehicle images"
    ON storage.objects FOR DELETE
    TO authenticated
    USING (bucket_id = 'uploadatr');